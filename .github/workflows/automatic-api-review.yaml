name: automatic-api-review
 
on:
  push:
    branches:
      - "bugfix/*"
  
env:
  RED: '\033[31m'
  GREEN: '\033[32m'
  YELLOW: '\033[33m'
  RESET: '\033[m'
  BASE_BRANCH: 'master'
  API_DIRECTORY: 'api/'
  GIT_ACTION_USER_NAME: 'gobiernoapis[bot]'
  GIT_ACTION_USER_EMAIL: 'diomedex10@gmail.com'
  MSG_COMMIT_UPD_OPENAPI_VERSION: 'Actualizando version correcta del contrato OpenAPI'
 
jobs:
  review-api:
    name: Revisar API
    runs-on: ubuntu-latest
    steps:
      - name: Clonar Repositorio de API
        id: checkout_repo_api
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Validar proceso de revision de API
        id: validate_review_process
        shell: bash
        if: ${{ steps.checkout_repo_api.outcome == 'success' }}
        run: |
          # Validar tipo de API<
          openapi_api_type=$(yq '.x-dpa-api-type' "${API_DIRECTORY}${GIT_REPO_NAME}.yaml")

          echo -e $YELLOW"********* Validando tipo api:."$RESET
          echo "Tipo de API detectado: $openapi_api_type"
        
          # Validar si es de tipo UX
          if [ "$openapi_api_type" = "UX" ]; then
            echo "✅ API es de tipo UX - Validación exitosa"
            echo "is_valid=true" >> $GITHUB_OUTPUT
          else
            echo "❌ API no es de tipo UX - Tipo actual: $openapi_api_type"
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
    
      - name: Obtener y validar versión del OpenAPI (info.version)
        id: read_openapi_version
        if: ${{ steps.validate_review_process.outputs.is_valid == 'TRUE' }} 
        run: |
          # Lee la versión del archivo OpenAPI
          GIT_REPO_NAME="${{ github.event.repository.name }}"
          API_DIRECTORY="${{ env.API_DIRECTORY }}"
          OPENAPI_VERSION=$(yq '.info.version' "${API_DIRECTORY}${GIT_REPO_NAME}.yaml")

          echo -e $GREEN"********* Versión en OpenAPI: $OPENAPI_VERSION"$RESET
          # Exportar en outputs
          echo "openapi_version=$OPENAPI_VERSION" >> "$GITHUB_OUTPUT"

      - name: Generar token de acceso
        id: gh_app
        if: ${{ steps.validate_review_process.outcome == 'success' }}
        uses: DPA-APIS/action-fix-design/.github/actions/generate-app-token@fix-fase02
        with:
          app-id: ${{ vars.GH_APP_ID_AUTOMATIC_API_REVIEW }}
          private-key: ${{ secrets.GH_APP_PK_AUTOMATIC_API_REVIEW }}
          organization: ${{ github.repository_owner }}
          purpose: 'API Token Review'
       
      - name: Obtener tipo de API
        shell: bash
        id: get_api_type
        if: ${{ steps.gh_app.outcome == 'success' }}
        run: |
          # Obtener tipo de API a partir del nombre de repositorio
          git_repo_name="${{ github.event.repository.name }}"
          api_type=$(echo $git_repo_name | cut -d'-' -f1)

          # Lee el tipo de API del archivo OpenAPI
          GIT_REPO_NAME="${{ github.event.repository.name }}"
          API_DIRECTORY="${{ env.API_DIRECTORY }}"
          openapi_api_type=$(yq '.x-dpa-api-type' "${API_DIRECTORY}${GIT_REPO_NAME}.yaml")

          echo -e $GREEN"******** El tipo de API es: '$api_type'."$RESET
          echo "api_type=$api_type" >> $GITHUB_OUTPUT

          echo -e $GREEN"******** El tipo de API(openapi): '$openapi_api_type'."$RESET
          echo "openapi_api_type=$openapi_api_type" >> $GITHUB_OUTPUT
  
      - name: Obtener y validar el último tag Revisado
        id: get_latest_tag
        shell: bash
        run: |
          set -e
          
          # 1. Obtener la versión del OpenAPI desde el paso anterior
          OPENAPI_VERSION="${{ steps.read_openapi_version.outputs.openapi_version }}"
          
          # 2. Parsear el major, minor y patch
          #    Asumiendo que la versión SIEMPRE es "X.Y.Z" (con 3 partes)
          major=$(echo "$OPENAPI_VERSION" | cut -d'.' -f1)
          minor=$(echo "$OPENAPI_VERSION" | cut -d'.' -f2)
          patch=$(echo "$OPENAPI_VERSION" | cut -d'.' -f3)
          
          echo -e $YELLOW"Versión en OpenAPI = $OPENAPI_VERSION"$RESET
          echo -e $YELLOW"Major = $major, Minor = $minor, Patch = $patch"$RESET
          
          # 3. Hacer fetch de todos los tags
          git fetch --tags
          
          # 4. Listar todos los tags que empiecen con "v{major}." (ej: "v1.")
          #    Ordenarlos de mayor a menor usando el orden semver (hay varias formas);
          #    una forma simple es usar "sort -V".
          #    Ej: Si major=1 => "v1.*"
          tags_version_major=$(git tag --list "v${major}.*" | sort -V)
          
          # 5. Tomar el último (el más "grande" semver) => tail -n1
          latest_tag=$(echo "$tags_version_major" | tail -n1)
          
          if [ -n "$latest_tag" ]; then
            echo -e $GREEN"********* El ultimo tag encontrado es: '$latest_tag'."$RESET
            echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          else
            echo -e $RED"********* No se encontraron tags en el repositorio. Debe pasar por revision de gobierno de APIs para generar el primer tag."$RESET >&2
            exit 1
          fi

          regex="$TAG_VERSION_SNAPSHOT_REGEX"          
          if echo "$latest_tag" | grep -Eq "$regex"; then
            result="true"
            echo -e $GREEN"******** El ultimo tag '$latest_tag' es VALIDO y cumple con el patron regex."$RESET
          else
            result="false"
            echo -e $RED"******** El ultimo tag '$latest_tag' NO es VALIDO y NO cumple con el patron regex '$regex'."$RESET >&2
            exit 1
          fi
          echo "is_valid=$result" >> $GITHUB_OUTPUT

      - name: Generar versión del nuevo tags
        id: validate_sequential_version
        shell: bash
        run: |
          set -e

          # 1) Variables de entorno provenientes de pasos anteriores
          openapi_version="${{ steps.read_openapi_version.outputs.openapi_version }}"
          last_tag="${{ steps.get_latest_tag.outputs.latest_tag }}"
          
          # 2) Quitamos la 'v' y  "-SNAPSHOT" del último tag -> "1.0.8"
          LAST_TAG_STRIPPED=${last_tag%-SNAPSHOT}
          LAST_TAG_STRIPPED="${LAST_TAG_STRIPPED#v}"

          echo -e $YELLOW"Versión del OpenAPI: $openapi_version"$RESET
          echo -e $YELLOW"Último tag encontrado: $last_tag"$RESET
          echo -e $YELLOW"Último tag VALIDO (sin 'v'): $LAST_TAG_STRIPPED"$RESET

          # 3) Parsear (major, minor, patch) de ambos
          openapi_major=$(echo "$openapi_version" | cut -d'.' -f1)
          openapi_minor=$(echo "$openapi_version" | cut -d'.' -f2)
          openapi_patch=$(echo "$openapi_version" | cut -d'.' -f3)

          last_tag_major=$(echo "$LAST_TAG_STRIPPED" | cut -d'.' -f1)
          last_tag_minor=$(echo "$LAST_TAG_STRIPPED" | cut -d'.' -f2)
          last_tag_patch=$(echo "$LAST_TAG_STRIPPED" | cut -d'.' -f3)

          # 4) Verificar la secuencialidad estricta:
          #    - version major openapi_major == last_tag_major
          #    - version minor openapi_minor == last_tag_minor
          #    - version patch openapi_patch == last_tag_patch + 1
      
          tags_new_version="v${openapi_version}"
          if [ "$openapi_major" -eq "$last_tag_major" ] && \
            [ "$openapi_minor" -eq "$last_tag_minor" ] && \
            [ "$openapi_patch" -eq $(( last_tag_patch + 1 )) ]; then
            is_valid='true'
          else
            echo -e $RED"********* La versión del OpenAPI ($openapi_version) no cumple la secuencia esperada."$RESET
            echo -e $RED"********* Se esperaba que fuera $last_tag_major.$last_tag_minor.$(( last_tag_patch + 1 )) (basado en el último tag: $last_tag)."$RESET
            exit 1
          fi

          echo -e $GREEN"********* La NUEVA versión del tags es: $tags_new_version."$RESET
          echo "tags_new_version=$tags_new_version" >> $GITHUB_OUTPUT
          
      - name: Generar token de acceso para crear PR
        id: gh_app_pr
        if: ${{ steps.validate_sequential_version.outcome == 'success' }}
        uses: DPA-APIS/action-fix-design/.github/actions/generate-app-token@fix-fase02
        with:
          app-id: ${{ vars.GH_APP_ID_PR_FIX_DESIGN_ACTION }}
          private-key: ${{ secrets.GH_APP_PK_PR_FIX_DESIGN_ACTION }}
          organization: ${{ github.repository_owner }}
          purpose: 'Create PR'

      - name: Configurar usuario git
        shell: bash
        id: config_git
        if: ${{ steps.gh_app_pr.outcome == 'success' }}
        run: |
          # Configurar usuario de github action que realizara las operaciones GIT
          sudo chown -R "${USER:-$(id -un)}" .
          git config --global user.name $GIT_ACTION_USER_NAME
          git config --global user.email $GIT_ACTION_USER_EMAIL

          #Configurar el romote con el Token
          git remote set-url origin "https://x-access-token:${{ steps.gh_app_pr.outputs.token }}@github.com/${{ github.repository }}.git"

      - name: Crear Pull Request
        id: create_pr
        if: ${{ steps.config_git.outcome == 'success' }}
        env:
          GH_TOKEN: ${{ steps.gh_app_pr.outputs.token }}
        run: |
          # Crear el template del PR directamente
          cat > pr_template.md << 'EOF'
          ## Descripción
          
          Este Pull Request ha sido generado automáticamente por el sistema de revisión de APIs tipo FIX.
          
          ## Información técnica
          
          - **Último tag**: ${{ steps.get_latest_tag.outputs.latest_tag }}
          - **Nuevo tag**: ${{ steps.validate_sequential_version.outputs.tags_new_version }}
          - **Tipo de API**: ${{ steps.get_api_type.outputs.api_type }}

          ---

          *Este PR fue generado automáticamente por GitHub Actions*
          EOF
          
          gh pr create --title "${GITHUB_REF_NAME}" --body-file pr_template.md

      - name: Aprobar Pull Request
        if: ${{ steps.create_pr.outcome == 'success' }}
        id: approval_pr
        run: |
          echo "${{ steps.gh_app.outputs.token }}" | gh auth login --with-token
          gh pr review --approve

      - name: Merge Pull Request
        id: merge_pr
        if: ${{ steps.approval_pr.outcome == 'success' }}
        run: |
           gh pr merge --merge --admin

      - id: checkout_base_branch
        if: ${{ steps.merge_pr.outcome == 'success' }}
        uses: actions/checkout@v4
        with: 
          ref: ${{ github.event.repository.default_branch }}
          token: ${{ steps.gh_app.outputs.token }}

      - name: Generar tag
        id: generate_tag
        shell: bash
        if: ${{ steps.validate_sequential_version.outputs.tags_new_version != null && steps.checkout_base_branch.outcome == 'success'}}
        run: |
          # Generar tag en GIT para la version fix
          tags_new_version="${{ steps.validate_sequential_version.outputs.tags_new_version }}"       

          git tag -a "$tags_new_version" -m "$tags_new_version"
          git push origin "${tags_new_version}"
          echo -e $GREEN"******** Se genero tag '$tags_new_version' en GIT para la nueva version FIX."$RESET
   